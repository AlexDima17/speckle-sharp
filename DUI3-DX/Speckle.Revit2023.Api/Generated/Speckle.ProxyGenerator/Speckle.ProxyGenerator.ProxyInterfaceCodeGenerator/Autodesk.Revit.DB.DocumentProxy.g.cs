//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/ProxyInterfaceSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

#nullable enable
using System;

namespace Speckle.Revit2023.Api
{
    public partial class DocumentProxy : global::Speckle.Revit2023.Api.IRevitDocument
    {
        public global::Autodesk.Revit.DB.Document _Instance { get; }
        
        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentSavingEventArgs> DocumentSaving { add { _Instance.DocumentSaving += value; } remove { _Instance.DocumentSaving -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentSavedEventArgs> DocumentSaved { add { _Instance.DocumentSaved += value; } remove { _Instance.DocumentSaved -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentSavingAsEventArgs> DocumentSavingAs { add { _Instance.DocumentSavingAs += value; } remove { _Instance.DocumentSavingAs -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentSavedAsEventArgs> DocumentSavedAs { add { _Instance.DocumentSavedAs += value; } remove { _Instance.DocumentSavedAs -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentPrintingEventArgs> DocumentPrinting { add { _Instance.DocumentPrinting += value; } remove { _Instance.DocumentPrinting -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentPrintedEventArgs> DocumentPrinted { add { _Instance.DocumentPrinted += value; } remove { _Instance.DocumentPrinted -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.ViewPrintingEventArgs> ViewPrinting { add { _Instance.ViewPrinting += value; } remove { _Instance.ViewPrinting -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.ViewPrintedEventArgs> ViewPrinted { add { _Instance.ViewPrinted += value; } remove { _Instance.ViewPrinted -= value; } }

        public event global::System.EventHandler<global::Autodesk.Revit.DB.Events.DocumentClosingEventArgs> DocumentClosing { add { _Instance.DocumentClosing += value; } remove { _Instance.DocumentClosing -= value; } }

        public bool IsValidObject { get => _Instance.IsValidObject; }

        public global::System.Guid WorksharingCentralGUID { get => _Instance.WorksharingCentralGUID; }

        public bool IsModelInCloud { get => _Instance.IsModelInCloud; }

        public bool IsDetached { get => _Instance.IsDetached; }

        public bool IsWorkshared { get => _Instance.IsWorkshared; }

        public bool IsLinked { get => _Instance.IsLinked; }

        public bool IsReadOnlyFile { get => _Instance.IsReadOnlyFile; }

        public bool IsReadOnly { get => _Instance.IsReadOnly; }

        public bool IsModified { get => _Instance.IsModified; }

        public bool IsModifiable { get => _Instance.IsModifiable; }

        public string Title { get => _Instance.Title; }

        public string PathName { get => _Instance.PathName; }

        public global::Autodesk.Revit.ApplicationServices.Application Application { get => _Instance.Application; }

        public bool IsFamilyDocument { get => _Instance.IsFamilyDocument; }

        public global::Autodesk.Revit.Creation.FamilyItemFactory FamilyCreate { get => _Instance.FamilyCreate; }

        public global::Autodesk.Revit.Creation.Document Create { get => _Instance.Create; }

        public bool ReactionsAreUpToDate { get => _Instance.ReactionsAreUpToDate; }

        public bool LoadFamily(string filename)
        {
            string filename_ = filename;
            var result_1520004266 = _Instance.LoadFamily(filename_);
            return result_1520004266;
        }

        public bool LoadFamilySymbol(string filename, string name)
        {
            string filename_ = filename;
            string name_ = name;
            var result__1493929306 = _Instance.LoadFamilySymbol(filename_, name_);
            return result__1493929306;
        }

        public bool Close()
        {
            var result__873722802 = _Instance.Close();
            return result__873722802;
        }

        public bool Close(bool saveModified)
        {
            bool saveModified_ = saveModified;
            var result__873722802 = _Instance.Close(saveModified_);
            return result__873722802;
        }

        public global::System.Collections.Generic.ICollection<global::Autodesk.Revit.DB.ElementId> GetPrintSettingIds()
        {
            var result__284256913 = _Instance.GetPrintSettingIds();
            return result__284256913;
        }

        public void Regenerate()
        {
            _Instance.Regenerate();
        }

        public void AutoJoinElements()
        {
            _Instance.AutoJoinElements();
        }

        public bool CanEnableCloudWorksharing()
        {
            var result_1164822149 = _Instance.CanEnableCloudWorksharing();
            return result_1164822149;
        }

        public bool CanEnableWorksharing()
        {
            var result__1694176966 = _Instance.CanEnableWorksharing();
            return result__1694176966;
        }

        public void EnableWorksharing(string worksetNameGridLevel, string worksetName)
        {
            string worksetNameGridLevel_ = worksetNameGridLevel;
            string worksetName_ = worksetName;
            _Instance.EnableWorksharing(worksetNameGridLevel_, worksetName_);
        }

        public void Save()
        {
            _Instance.Save();
        }

        public void SaveAs(string filepath)
        {
            string filepath_ = filepath;
            _Instance.SaveAs(filepath_);
        }

        public void SaveCloudModel()
        {
            _Instance.SaveCloudModel();
        }

        public void SaveAsCloudModel(global::System.Guid accountId, global::System.Guid projectId, string folderId, string modelName)
        {
            global::System.Guid accountId_ = accountId;
            global::System.Guid projectId_ = projectId;
            string folderId_ = folderId;
            string modelName_ = modelName;
            _Instance.SaveAsCloudModel(accountId_, projectId_, folderId_, modelName_);
        }

        public void EnableCloudWorksharing()
        {
            _Instance.EnableCloudWorksharing();
        }

        public global::System.Collections.Generic.IList<global::Autodesk.Revit.DB.FailureMessage> GetWarnings()
        {
            var result__980900261 = _Instance.GetWarnings();
            return result__980900261;
        }

        public string GetCloudModelUrn()
        {
            var result_1495462325 = _Instance.GetCloudModelUrn();
            return result_1495462325;
        }

        public string GetHubId()
        {
            var result_545345104 = _Instance.GetHubId();
            return result_545345104;
        }

        public string GetProjectId()
        {
            var result__701667562 = _Instance.GetProjectId();
            return result__701667562;
        }

        public string GetCloudFolderId(bool forceRefresh)
        {
            bool forceRefresh_ = forceRefresh;
            var result__1918718414 = _Instance.GetCloudFolderId(forceRefresh_);
            return result__1918718414;
        }

        public bool HasAllChangesFromCentral()
        {
            var result_1619308251 = _Instance.HasAllChangesFromCentral();
            return result_1619308251;
        }

        public global::System.Collections.Generic.ICollection<global::Autodesk.Revit.DB.ElementId> Delete(global::System.Collections.Generic.ICollection<global::Autodesk.Revit.DB.ElementId> elementIds)
        {
            global::System.Collections.Generic.ICollection<global::Autodesk.Revit.DB.ElementId> elementIds_ = elementIds;
            var result__258107623 = _Instance.Delete(elementIds_);
            return result__258107623;
        }

        public void ResetSharedCoordinates()
        {
            _Instance.ResetSharedCoordinates();
        }

        public bool IsBackgroundCalculationInProgress()
        {
            var result__1113887957 = _Instance.IsBackgroundCalculationInProgress();
            return result__1113887957;
        }

        public void Dispose()
        {
            _Instance.Dispose();
        }


        public DocumentProxy(global::Autodesk.Revit.DB.Document instance)
        {
            _Instance = instance;
            


        }
    }
}
#nullable restore